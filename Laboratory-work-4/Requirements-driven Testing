# Тестирование на основе требований

Целью практики тестирования на основе требований (RT) является обеспечение того, чтобы внедренные средства управления безопасностью работали должным образом и удовлетворяли заявленным требованиям безопасности проекта. Он делает это путем постепенного создания набора тестов безопасности и регрессионных случаев и их регулярного выполнения.

Ключевым аспектом этой практики является ее внимание как к положительному, так и к отрицательному тестированию. Первый проверяет, удовлетворяют ли элементы управления безопасностью приложения заявленным требованиям безопасности, и проверяет их правильное функционирование. Эти требования, как правило, носят функциональный характер. Отрицательное тестирование касается качества реализации средств управления безопасностью и направлено на выявление неожиданных недостатков проектирования и ошибок реализации путем тестирования неправильного использования и злоупотреблений. В более продвинутых формах эта практика способствует стресс-тестированию безопасности, такому как отказ в обслуживании, и стремится постоянно улучшать безопасность приложений путем последовательной автоматизации модульных тестов безопасности и создания регрессионных тестов безопасности для всех выявленных и исправленных ошибок.

Хотя как методы тестирования, основанного на требованиях, так и тестирования безопасности связаны с тестированием безопасности, первое фокусируется на проверке правильной реализации требований безопасности, в то время как второе направлено на выявление технических недостатков реализации в приложении, независимо от требований.

## Обзор потоков

### Поток A - Проверка управления

Проверка элементов управления проверяет соответствие элементов управления безопасностью и требований  посредством тестирования, вытекающего из требований, и предотвращает внедрение ошибки в более поздних выпусках посредством регрессионного тестирования.

### Поток B - Тестирование на неправильное использование / злоупотребление 

Тестирование на неправильное использование / злоупотребление использует нечеткость, случаи неправильного использования  / злоупотребления и идентификация любых функциональных возможностей или ресурсов в программном обеспечении, которые могут быть злоупотребляют для того, чтобы выявить слабые места в функциях для атаки на приложение.

## Обзор мероприятий
Уровень зрелости		Поток А
	Поток B

1	Оппортунистически найти основные уязвимости и другие проблемы безопасности.	Тестирование программных средств управления безопасностью.	Выполните тестирование нечеткости безопасности.
2	Выполните проверку реализации, чтобы обнаружить риски, связанные с конкретными приложениями, в соответствии с требованиями безопасности.	Получение тестовых случаев из известных требований безопасности.	Создавайте и тестируйте случаи злоупотреблений и тест на дефекты бизнес-логики.
3	Поддерживайте уровень безопасности приложения после исправления ошибок, изменений или во время обслуживания.	Выполните регрессионное тестирование (с модульными тестами безопасности).	Отказ в обслуживании и стресс-тестирование безопасности.
 

# Поток A - Проверка управления

## УРОВЕНЬ ЗРЕЛОСТИ 1

### Выгода

Проверенная эффективность стандартных средств управления безопасностью

### Активность

Проведите тесты безопасности, чтобы убедиться, что стандартные программные средства управления безопасностью работают должным образом. На высоком уровне это означает проверку правильного функционирования средств управления конфиденциальностью, целостностью и доступностью данных, а также сервиса. Тесты безопасности, по крайней мере, включают тестирование проверки подлинности, контроля доступа, проверки ввода, кодирования и экранирования данных и элементов управления шифрованием. Целью теста является проверка правильности реализации элементов управления безопасностью.

Тестирование безопасности проверяет соответствующие элементы управления безопасностью программного обеспечения. Выполняйте контрольные тесты безопасности вручную или с помощью инструментов, каждый раз, когда приложение изменяет использование элементов управления. Такие методы, как переключатели функций и A/B-тестирование, могут использоваться для постепенного предоставления функций более широкой аудитории по мере их достаточной проверки. Проверка управления программным обеспечением является обязательной для всего программного обеспечения, которое является частью программы SAMM.

### Вопрос

Тестируете ли вы приложения на корректное функционирование стандартных средств управления безопасностью?

### Критерии качества 

* Тестирование безопасности, по крайней мере, проверяет реализацию проверки подлинности, контроля доступа, проверки ввода, кодирования и экранирования данных, а также элементов управления шифрованием
* Тестирование безопасности выполняется всякий раз, когда приложение изменяет использование элементов управления

### Ответы
* Нет
* Да, некоторые из них
* Да, по крайней мере половина из них
* Да, большинство или все из них

  
## УРОВЕНЬ ЗРЕЛОСТИ 2

### Выгода

### Активность

Исходя из требований безопасности, определите и реализуйте набор тестовых случаев безопасности, чтобы проверить программное обеспечение на правильность функциональности. Чтобы иметь успешную программу тестирования, вы должны знать цели тестирования, определенные требованиями безопасности.

Получение тестовых случаев безопасности для приложений в области применения из требований безопасности, созданных в рамках практики безопасности SAMM «Требования безопасности». Чтобы проверить требования безопасности с помощью тестов безопасности, требования безопасности управляются функциями и выделяют ожидаемую функциональность (что) и, неявно, реализацию (как). Эти требования также называются «положительными требованиями», поскольку в них указывается ожидаемая функциональность, которая может быть проверена с помощью тестов безопасности. Примеры положительных требований включают «приложение заблокирует пользователя после шести неудачных попыток входа» или «пароли должны содержать не менее шести буквенно-цифровых символов». Проверка положительных требований заключается в утверждении ожидаемой функциональности. Вы можете сделать это, повторно создав условия тестирования и запустив тест в соответствии с предопределенными входными данными. Отображение результатов как условия сбоя или прохождения.

Часто наиболее эффективно использовать время проектной группы для создания тестовых случаев для конкретных приложений, а общедоступные ресурсы или приобретенные базы знаний — для выбора применимых общих тестовых случаев для обеспечения безопасности. Соответствующие сотрудники по разработке, безопасности и обеспечению качества проверяют тестовые случаи кандидатов на применимость, эффективность и осуществимость. Получение тестовых случаев на этапе требований и/или проектирования функциональности. Тестирование требований безопасности является частью функционального тестирования программного обеспечения.

### Вопрос

Последовательно ли вы пишете и выполняете тестовые сценарии для проверки функциональности требований безопасности?

### Критерии качества
* Вы настраиваете тесты для каждого приложения и утверждаете ожидаемые функциональные возможности безопасности
* Результаты теста записываются как условие прохождения или сбоя
* Тесты используют стандартизированную инфраструктуру или DSL

### Ответы
* Нет
* Да, некоторые из них
* Да, по крайней мере половина из них
* Да, большинство или все из них

  
## УРОВЕНЬ ЗРЕЛОСТИ 3

### Выгода

Своевременное и надежное выявление нарушений требований безопасности
### Активность

Напишите и автоматизируйте регрессионные тесты для всех выявленных (и исправленных) ошибок, чтобы гарантировать, что они станут тестовой программой, предотвращающей появление подобных проблем в более поздних выпусках. Модульные тесты безопасности должны динамически проверять (т. е. во время выполнения), что компоненты функционируют должным образом, и должны проверять правильность реализации изменений кода.

Хорошей практикой для разработчиков является создание тестовых случаев безопасности в виде универсального набора тестов безопасности, который является частью существующей платформы модульного тестирования. Общий набор тестов безопасности может включать в себя тестовые случаи безопасности для проверки как положительных, так и отрицательных требований к элементам управления безопасностью, таким как идентификация, аутентификация и контроль доступа, проверка ввода и кодирование, управление пользователями и сеансами, обработка ошибок и исключений, шифрование, аудит и ведение журнала. Проверьте правильность выполнения тестов безопасности как можно раньше. Если это возможно, например, рассмотрите возможность прохождения тестов безопасности как часть требований к слиянию, прежде чем разрешать ввод нового кода в основную кодовую базу. Кроме того, рассмотрите их прохождение как требование для проверки сборки.

Для функциональных тестов безопасности используйте модульные тесты для функциональности элементов управления безопасностью на уровне компонентов программного обеспечения, таких как функции, методы или классы. Например, тестовый случай может проверять валидацию ввода и вывода (например, санитарную обработку переменных) и проверку границ переменных путем утверждения ожидаемой функциональности компонента.

### Вопрос

Вы автоматически тестируете приложения на регрессию безопасности?

### Критерии качества
* Вы постоянно пишете тесты для всех выявленных ошибок (возможно, превышающих предварительно определенный порог серьезности)
* Сбор тестов безопасности в наборе тестов, который является частью существующей платформы модульного тестирования

### Ответы
* Нет
* Да, для некоторых приложений
* Да, по крайней мере, для половины приложений
* Да, для большинства или всех приложений

 
# Тестирование злоупотреблений/ злоупотреблений

## УРОВЕНЬ ЗРЕЛОСТИ 1

### Выгода

Анализ поведения ваших приложений при работе с неожиданным вводом данных
### Активность

Выполняйте фаззинг, отправляя случайные или искаженные данные испытуемому в попытке вызвать его сбой. Fuzz testing или Fuzzing - это метод тестирования программного обеспечения Black Box, который заключается в поиске ошибок реализации с использованием автоматизированного искаженного или полудеформированного внедрения данных. Охватите хотя бы минимальное размытие уязвимостей на фоне основных входных параметров приложения.
Преимуществом нечеткого тестирования является простота конструкции теста и отсутствие предубеждений о поведении системы. Стохастический подход приводит к ошибкам, которые человеческие глаза или структурированное тестирование часто пропускают. Это также один из немногих способов оценки качества закрытой системы (например, SIP-телефона). Простота фузментирования цели компенсируется сложностью точного обнаружения и сортировки столкновений. Отдавайте предпочтение существующим инструментам и платформам нечеткого анализа, чтобы использовать их вспомогательные инструменты.

### Вопрос

Тестируете ли вы приложения с использованием методов рандомизации или фаззинга?

### Критерии качества
* Тестирование охватывает большинство или все основные входные параметры приложения
* Вы записываете и проверяете все сбои приложений на предмет воздействия на безопасность с максимальными усилиями

### Ответы
* Нет
* Да, для некоторых приложений
* Да, по крайней мере, для половины приложений
* Да, для большинства или всех приложений

## УРОВЕНЬ ЗРЕЛОСТИ 2

### Выгода

Обнаружение недостатков бизнес-логики приложений
### Активность

Случаи неправомерного и неправомерного использования описывают непреднамеренные и злонамеренные сценарии использования приложения, описывая, как злоумышленник может это сделать. Создавайте случаи неправильного использования и злоупотреблений, чтобы неправильно использовать или использовать слабые места элементов управления в функциях программного обеспечения для атаки на приложение. Используйте модели случаев злоупотреблений для приложения, чтобы служить топливом для идентификации конкретных тестов безопасности, которые прямо или косвенно используют сценарии злоупотреблений.

Злоупотребление функциональностью, иногда называемое «атакой бизнес-логики», зависит от проектирования и реализации функций и возможностей приложения. В качестве примера можно привести использование процесса сброса пароля для перечисления учетных записей. В рамках тестирования бизнес-логики определите важные для приложения бизнес-правила и превратите их в эксперименты, чтобы проверить, правильно ли приложение применяет бизнес-правило. Например, в приложении для торговли акциями разрешено ли злоумышленнику начать торговлю в начале дня и зафиксировать цену, держать сделку открытой до конца дня, а затем завершить продажу, если цена акций выросла, или отменить, если цена упала?
### Вопрос

Создаете ли вы случаи злоупотреблений на основе функциональных требований и используете ли их для проведения тестов безопасности?

### Критерии качества
* Важный бизнес-функционал имеет соответствующие случаи злоупотреблений
* Вы строите истории о насилии вокруг соответствующих персонажей с четко определенными мотивациями и характеристиками
* Вы фиксируете выявленные слабые места как требования безопасности

### Ответы
* Нет
* Да, иногда
* Да, большую часть или все время

## УРОВЕНЬ ЗРЕЛОСТИ 3

### Выгода

Прозрачность устойчивости к атакам типа «отказ в обслуживании»
### Активность

Приложения особенно подвержены атакам типа «отказ в обслуживании». Выполняйте нагрузочное тестирование на отказ в обслуживании и безопасность против них в контролируемых условиях, предпочтительно в средах приема приложений.

Инструменты нагрузочного тестирования генерируют синтетический трафик, позволяя тестировать производительность приложения при большой нагрузке. Одним из важных тестов является то, сколько запросов в секунду приложение может обрабатывать, оставаясь в пределах своих требований к производительности. Тестирование с одного IP-адреса по-прежнему полезно, поскольку оно дает представление о том, сколько запросов злоумышленник должен генерировать, чтобы повлиять на приложение.

Атаки типа «отказ в обслуживании» обычно приводят к нехватке или исчерпанию ресурсов приложений. Чтобы определить, можно ли использовать какие-либо ресурсы для создания типа "отказ в обслуживании", проанализируйте каждый ресурс приложения, чтобы увидеть, как его можно исчерпать. Приоритизацию действий, не прошедших проверку подлинности, пользователь может сделать. Дополните общие тесты отказа в обслуживании стресс-тестами безопасности для выполнения действий или создания условий, вызывающих задержки, сбои или сбои тестируемого приложения.

### Вопрос
Выполняете ли вы стресс-тестирование на отказ в обслуживании и безопасность?

### Критерии качества
* Стресс-тесты нацелены на конкретные ресурсы приложения (например, истощение памяти при сохранении больших объемов данных в сеансе пользователя)
* Вы разрабатываете тесты для соответствующих персонажей с четко определенными возможностями (знания, ресурсы)
* Результаты возвращаются в методы проектирования 

### Ответы
* Нет
* Да, иногда
* Да, по крайней мере, в половине случаев
* Да, большую часть или все время




